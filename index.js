require('dotenv').config();
const { Client, GatewayIntentBits } = require('discord.js');
const { DisTube } = require('distube');
const { YtDlpPlugin } = require('@distube/yt-dlp');
const ffmpeg = require('ffmpeg-static');



// Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n ffmpeg
const ffmpegPath = ffmpeg;
process.env.FFMPEG_PATH = ffmpegPath;
process.env.PATH = `${process.env.PATH};${require('path').dirname(ffmpegPath)}`;
console.log('FFMPEG Path:', ffmpegPath);

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildVoiceStates,
    ]
});

// Kh·ªüi t·∫°o DisTube v·ªõi c·∫•u h√¨nh m·ªõi
const distube = new DisTube(client, {
    emitNewSongOnly: true,
    savePreviousSongs: true,
    nsfw: false,
    plugins: [new YtDlpPlugin()],
    leaveOnEmpty: true,
    leaveOnFinish: false,
    leaveOnStop: false,
    ytdlOptions: {
        quality: 'highestaudio',
        format: 'audioonly',
        liveBuffer: 60000,
        dlChunkSize: 0,
        bitrate: 320,
        filter: 'audioonly',
    }
});

const prefix = 'w';

// Import MusicUI
const MusicUI = require('./musicUI');

// Th√™m v√†o ƒë·∫ßu file, sau c√°c import
const BOT_VERSION = '1.0.0';
const DEVELOPER = 'Nguy√™n K·ª∑';
const HELP_MESSAGE = `
üéµ **H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG Skadi Music BOT**

**Prefix:** ${prefix}

**C√°c L·ªánh:**
‚Ä¢ ${prefix}play <t√™n b√†i h√°t/URL> - Ph√°t nh·∫°c
‚Ä¢ ${prefix}pause - T·∫°m d·ª´ng
‚Ä¢ ${prefix}resume - Ti·∫øp t·ª•c ph√°t
‚Ä¢ ${prefix}skip - B·ªè qua b√†i hi·ªán t·∫°i
‚Ä¢ ${prefix}stop - D·ª´ng ph√°t nh·∫°c
‚Ä¢ ${prefix}info - Xem th√¥ng tin bot

**N√∫t ƒêi·ªÅu Khi·ªÉn:**
‚Ä¢ ‚èØÔ∏è - Ph√°t/T·∫°m d·ª´ng
‚Ä¢ ‚è≠Ô∏è - B·ªè qua b√†i hi·ªán t·∫°i
‚Ä¢ ‚èπÔ∏è - D·ª´ng ph√°t nh·∫°c
‚Ä¢ üìã - Xem danh s√°ch ph√°t

**Phi√™n b·∫£n:** ${BOT_VERSION}
**Developer:** ${DEVELOPER}

ƒê·ªÉ s·ª≠ d·ª•ng bot, h√£y v√†o m·ªôt k√™nh voice v√† s·ª≠ d·ª•ng c√°c l·ªánh tr√™n!
`;

function formatUptime(uptime) {
    const seconds = Math.floor(uptime / 1000) % 60;
    const minutes = Math.floor(uptime / (1000 * 60)) % 60;
    const hours = Math.floor(uptime / (1000 * 60 * 60)) % 24;
    const days = Math.floor(uptime / (1000 * 60 * 60 * 24));

    const parts = [];
    if (days > 0) parts.push(`${days} ng√†y`);
    if (hours > 0) parts.push(`${hours} gi·ªù`);
    if (minutes > 0) parts.push(`${minutes} ph√∫t`);
    if (seconds > 0) parts.push(`${seconds} gi√¢y`);

    return parts.join(', ');
}

client.on('ready', async () => {
    console.log(`Bot ƒë√£ s·∫µn s√†ng v·ªõi t√™n ${client.user.tag}`);
    
    // Get all guilds the bot is in
    const guilds = client.guilds.cache;
    
    // For each guild, create a control panel in the first text channel
    for (const [_, guild] of guilds) {
        const channel = guild.channels.cache.find(
            channel => channel.type === 0 && channel.permissionsFor(guild.members.me).has('SendMessages')
        );
        
        if (channel) {
            try {
                await MusicUI.sendMusicControlPanel(channel);
                console.log(`ƒê√£ t·∫°o b·∫£ng ƒëi·ªÅu khi·ªÉn nh·∫°c trong k√™nh ${channel.name}`);
            } catch (error) {
                console.error(`L·ªói khi t·∫°o b·∫£ng ƒëi·ªÅu khi·ªÉn trong ${guild.name}:`, error);
            }
        }
    }
});

client.on('messageCreate', async message => {
    if (!message.content.startsWith(prefix) || message.author.bot) return;

    const args = message.content.slice(prefix.length).trim().split(/ +/);
    const command = args.shift().toLowerCase();

    if (command === 'play') {
        const voiceChannel = message.member.voice.channel;
        if (!voiceChannel) {
            return message.reply('B·∫°n c·∫ßn v√†o m·ªôt k√™nh voice ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!');
        }

        try {
            const query = args.join(' ');
            if (!query) {
                return message.reply('Vui l√≤ng cung c·∫•p b√†i h√°t ƒë·ªÉ ph√°t!');
            }
            await musicControl.play(message, query);
        } catch (error) {
            console.error(error);
            message.reply('C√≥ l·ªói x·∫£y ra khi ph√°t nh·∫°c!');
        }
    }

    // Other music commands
    switch (command) {
        case 'pause':
            musicControl.pause(message);
            break;
        case 'resume':
            musicControl.resume(message);
            break;
        case 'skip':
            musicControl.skip(message);
            break;
        case 'stop':
            musicControl.stop(message);
            break;
        case 'help':
            const helpEmbed = new EmbedBuilder()
                .setColor('#0099ff')
                .setTitle('üéµ Music Bot - H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng')
                .setDescription(HELP_MESSAGE)
                .setTimestamp()
                .setFooter({ text: `Version ${BOT_VERSION} ‚Ä¢ Developed by ${DEVELOPER}` });
            
            message.channel.send({ embeds: [helpEmbed] });
            break;
        case 'info':
        case 'botinfo':
            const infoEmbed = new EmbedBuilder()
                .setColor('#0099ff')
                .setTitle('ü§ñ Th√¥ng Tin Bot')
                .addFields(
                    { name: 'üè∑Ô∏è T√™n Bot', value: client.user.username, inline: true },
                    { name: 'üÜî Bot ID', value: client.user.id, inline: true },
                    { name: 'üìä S·ªë Server', value: client.guilds.cache.size.toString(), inline: true },
                    { name: 'üë®‚Äçüíª Developer', value: DEVELOPER, inline: true },
                    { name: 'üîÑ Version', value: BOT_VERSION, inline: true },
                    { name: '‚è∞ Uptime', value: formatUptime(client.uptime), inline: true }
                )
                .setThumbnail(client.user.displayAvatarURL())
                .setTimestamp()
                .setFooter({ text: `Developed by ${DEVELOPER}` });
            
            message.channel.send({ embeds: [infoEmbed] });
            break;
    }
});

// DisTube event handlers
process.on('unhandledRejection', error => {
    console.error('Unhandled promise rejection:', error);
});

distube
    .on('playSong', async (queue, song) => {
        console.log('Playing song:', {
            name: song.name,
            url: song.url,
            duration: song.duration,
            queue: queue.songs.length
        });
        await queue.textChannel.send(
            `üéµ ƒêang ph√°t: \`${song.name}\` - \`${song.formattedDuration}\`\nY√™u c·∫ßu b·ªüi: ${song.user}`
            
        );
        // MusicUI.updateMusicControlPanel();

    })
    .on('addSong', async (queue, song) => {
        console.log('Added song to queue:', {
            name: song.name,
            url: song.url,
            duration: song.duration,
            queueLength: queue.songs.length
        });
        await queue.textChannel.send(
            `‚úÖ ƒê√£ th√™m \`${song.name}\` v√†o h√†ng ƒë·ª£i\nY√™u c·∫ßu b·ªüi: ${song.user}`
        );
        MusicUI.updateMusicControlPanel();

    })
    .on('error', async (channel, error) => {
        console.error('DisTube error:', error);
        if (channel) {
            try {
                await channel.send(`‚ùå L·ªói: ${error.message}`);
            } catch (e) {
                console.error('Error sending error message:', e);
            }
        }
    })
    .on('disconnect', channel => {
        console.log('Bot disconnected from voice channel');
        if (channel) channel.send('üîå Bot ƒë√£ ng·∫Øt k·∫øt n·ªëi kh·ªèi k√™nh voice');
    })
    .on('empty', channel => {
        console.log('Voice channel is empty');
        if (channel) channel.send('üì≠ K√™nh voice tr·ªëng - Bot s·∫Ω r·ªùi k√™nh sau 5 ph√∫t');
    })
    .on('initQueue', queue => {
        console.log('Initializing queue with settings:', {
            autoplay: queue.autoplay,
            volume: queue.volume,
            filters: queue.filters
        });
        queue.autoplay = false;
        queue.volume = 100;
    })
    .on('searchResult', (message, result) => {
        console.log('Search results:', result.map(song => ({
            name: song.name,
            url: song.url,
            duration: song.duration
        })));
    })
    .on('searchNoResult', message => {
        console.log('No search results found');
        message.channel.send('Kh√¥ng t√¨m th·∫•y b√†i h√°t!');
    })
    .on('searchCancel', message => {
        console.log('Search cancelled');
        message.channel.send('ƒê√£ h·ªßy t√¨m ki·∫øm!');
    })
    .on('searchInvalidAnswer', message => {
        console.log('Invalid search answer received');
        message.channel.send('C√¢u tr·∫£ l·ªùi kh√¥ng h·ª£p l·ªá!');
    })
    .on('searchDone', (message, answer, query) => {
        console.log('Search done:', query);
    });

// Import the music control module
const musicControl = require('./musicControl');

// Initialize the music control with DisTube instance
musicControl.init(distube);

// Handle button interactions
client.on('interactionCreate', async interaction => {
    if (!interaction.isButton()) return;
    await musicControl.handleButtonInteraction(interaction);
});

client.login(process.env.DISCORD_TOKEN); 